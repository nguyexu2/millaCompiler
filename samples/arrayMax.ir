; ModuleID = 'arrayMax'
source_filename = "arrayMax"

@I = global i32 0
@MAX = global i32 0
@X = global [21 x i32] zeroinitializer

declare i32 @writeln(i32)

declare i32 @readln(i32*)

define i32 @main() {
entry:
  store i32 11, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 0)
  store i32 66, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 1)
  store i32 128, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 2)
  store i32 49, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 3)
  store i32 133, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 4)
  store i32 46, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 5)
  store i32 15, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 6)
  store i32 87, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 7)
  store i32 55, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 8)
  store i32 37, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 9)
  store i32 78, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 10)
  store i32 44, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 11)
  store i32 33, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 12)
  store i32 38, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 13)
  store i32 85, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 14)
  store i32 6, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 15)
  store i32 150, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 16)
  store i32 4, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 17)
  store i32 1, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 18)
  store i32 55, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 19)
  store i32 78, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 20)
  store i32 0, i32* @I
  br label %condition

functionReturn:                                   ; preds = %after_loop5
  ret i32 0

condition:                                        ; preds = %loop, %entry
  %I = load i32, i32* @I
  %"loopcond_cur<=endval" = icmp sle i32 %I, 20
  br i1 %"loopcond_cur<=endval", label %loop, label %after_loop

loop:                                             ; preds = %condition
  %I1 = load i32, i32* @I
  %0 = sub i32 %I1, 0
  %1 = getelementptr [21 x i32], [21 x i32]* @X, i32 0, i32 %0
  %2 = load i32, i32* %1
  %3 = call i32 @writeln(i32 %2)
  %I2 = load i32, i32* @I
  %"next val in iteration" = add i32 %I2, 1
  store i32 %"next val in iteration", i32* @I
  br label %condition

after_loop:                                       ; preds = %condition
  %4 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @X, i32 0, i32 0)
  store i32 %4, i32* @MAX
  store i32 1, i32* @I
  br label %condition3

condition3:                                       ; preds = %after_if, %after_loop
  %I6 = load i32, i32* @I
  %"loopcond_cur<=endval7" = icmp sle i32 %I6, 20
  br i1 %"loopcond_cur<=endval7", label %loop4, label %after_loop5

loop4:                                            ; preds = %condition3
  %MAX = load i32, i32* @MAX
  %I8 = load i32, i32* @I
  %5 = sub i32 %I8, 0
  %6 = getelementptr [21 x i32], [21 x i32]* @X, i32 0, i32 %5
  %7 = load i32, i32* %6
  %less = icmp slt i32 %MAX, %7
  %8 = zext i1 %less to i32
  %"ifcond-if_EQ_1 - iftrue" = icmp eq i32 %8, 1
  br i1 %"ifcond-if_EQ_1 - iftrue", label %then, label %else

after_loop5:                                      ; preds = %condition3
  %MAX12 = load i32, i32* @MAX
  %9 = call i32 @writeln(i32 %MAX12)
  br label %functionReturn

then:                                             ; preds = %loop4
  %I9 = load i32, i32* @I
  %10 = sub i32 %I9, 0
  %11 = getelementptr [21 x i32], [21 x i32]* @X, i32 0, i32 %10
  %12 = load i32, i32* %11
  store i32 %12, i32* @MAX
  br label %after_if

else:                                             ; preds = %loop4
  br label %after_if

after_if:                                         ; preds = %else, %then
  %I10 = load i32, i32* @I
  %"next val in iteration11" = add i32 %I10, 1
  store i32 %"next val in iteration11", i32* @I
  br label %condition3
}
