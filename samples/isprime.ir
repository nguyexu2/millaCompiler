; ModuleID = 'isprime'
source_filename = "isprime"

declare i32 @writeln(i32)

declare i32 @readln(i32*)

define i32 @isprime(i32 %n) {
entry:
  %i = alloca i32, i32 0
  %max = alloca i32, i32 0
  %isprime = alloca i32, i32 0
  %n1 = alloca i32, i32 0
  store i32 %n, i32* %n1
  %n2 = load i32, i32* %n1
  %less = icmp slt i32 %n2, 2
  %0 = zext i1 %less to i32
  %"ifcond-if_EQ_1 - iftrue" = icmp eq i32 %0, 1
  br i1 %"ifcond-if_EQ_1 - iftrue", label %then, label %else

functionReturn:                                   ; preds = %after_loop, %then49, %then41, %then31, %then23, %then10, %then3, %then
  %1 = load i32, i32* %isprime
  ret i32 %1

then:                                             ; preds = %entry
  store i32 0, i32* %isprime
  br label %functionReturn

else:                                             ; preds = %entry
  br label %after_if

after_if:                                         ; preds = %else, %after_exit
  %n6 = load i32, i32* %n1
  %less7 = icmp slt i32 %n6, 4
  %2 = zext i1 %less7 to i32
  %"ifcond-if_EQ_1 - iftrue8" = icmp eq i32 %2, 1
  br i1 %"ifcond-if_EQ_1 - iftrue8", label %then3, label %else4

after_exit:                                       ; No predecessors!
  br label %after_if

then3:                                            ; preds = %after_if
  store i32 1, i32* %isprime
  br label %functionReturn

else4:                                            ; preds = %after_if
  br label %after_if5

after_if5:                                        ; preds = %else4, %after_exit9
  %n13 = load i32, i32* %n1
  %remainder = srem i32 %n13, 2
  %equal = icmp eq i32 %remainder, 0
  %3 = zext i1 %equal to i32
  %n14 = load i32, i32* %n1
  %remainder15 = srem i32 %n14, 3
  %equal16 = icmp eq i32 %remainder15, 0
  %4 = zext i1 %equal16 to i32
  %or = or i32 %3, %4
  %"ifcond-if_EQ_1 - iftrue17" = icmp eq i32 %or, 1
  br i1 %"ifcond-if_EQ_1 - iftrue17", label %then10, label %else11

after_exit9:                                      ; No predecessors!
  br label %after_if5

then10:                                           ; preds = %after_if5
  store i32 0, i32* %isprime
  br label %functionReturn

else11:                                           ; preds = %after_if5
  br label %after_if12

after_if12:                                       ; preds = %else11, %after_exit18
  store i32 1, i32* %isprime
  %n19 = load i32, i32* %n1
  store i32 %n19, i32* %max
  store i32 5, i32* %i
  br label %condition

after_exit18:                                     ; No predecessors!
  br label %after_if12

condition:                                        ; preds = %after_if51, %after_if12
  %i20 = load i32, i32* %i
  %max21 = load i32, i32* %max
  %less22 = icmp slt i32 %i20, %max21
  %5 = zext i1 %less22 to i32
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %loop, label %after_loop

loop:                                             ; preds = %condition
  %i26 = load i32, i32* %i
  %max27 = load i32, i32* %max
  %less28 = icmp slt i32 %i26, %max27
  %7 = zext i1 %less28 to i32
  %"ifcond-if_EQ_1 - iftrue29" = icmp eq i32 %7, 1
  br i1 %"ifcond-if_EQ_1 - iftrue29", label %then23, label %else24

after_loop:                                       ; preds = %condition
  br label %functionReturn

then23:                                           ; preds = %loop
  br label %functionReturn

else24:                                           ; preds = %loop
  br label %after_if25

after_if25:                                       ; preds = %else24, %after_exit30
  %n34 = load i32, i32* %n1
  %i35 = load i32, i32* %i
  %remainder36 = srem i32 %n34, %i35
  %equal37 = icmp eq i32 %remainder36, 0
  %8 = zext i1 %equal37 to i32
  %"ifcond-if_EQ_1 - iftrue38" = icmp eq i32 %8, 1
  br i1 %"ifcond-if_EQ_1 - iftrue38", label %then31, label %else32

after_exit30:                                     ; No predecessors!
  br label %after_if25

then31:                                           ; preds = %after_if25
  store i32 0, i32* %isprime
  br label %functionReturn

else32:                                           ; preds = %after_if25
  br label %after_if33

after_if33:                                       ; preds = %else32, %after_exit39
  %i40 = load i32, i32* %i
  %add = add i32 %i40, 2
  store i32 %add, i32* %i
  %i44 = load i32, i32* %i
  %max45 = load i32, i32* %max
  %less46 = icmp slt i32 %i44, %max45
  %9 = zext i1 %less46 to i32
  %"ifcond-if_EQ_1 - iftrue47" = icmp eq i32 %9, 1
  br i1 %"ifcond-if_EQ_1 - iftrue47", label %then41, label %else42

after_exit39:                                     ; No predecessors!
  br label %after_if33

then41:                                           ; preds = %after_if33
  br label %functionReturn

else42:                                           ; preds = %after_if33
  br label %after_if43

after_if43:                                       ; preds = %else42, %after_exit48
  %n52 = load i32, i32* %n1
  %i53 = load i32, i32* %i
  %remainder54 = srem i32 %n52, %i53
  %equal55 = icmp eq i32 %remainder54, 0
  %10 = zext i1 %equal55 to i32
  %"ifcond-if_EQ_1 - iftrue56" = icmp eq i32 %10, 1
  br i1 %"ifcond-if_EQ_1 - iftrue56", label %then49, label %else50

after_exit48:                                     ; No predecessors!
  br label %after_if43

then49:                                           ; preds = %after_if43
  store i32 0, i32* %isprime
  br label %functionReturn

else50:                                           ; preds = %after_if43
  br label %after_if51

after_if51:                                       ; preds = %else50, %after_exit57
  %i58 = load i32, i32* %i
  %add59 = add i32 %i58, 4
  store i32 %add59, i32* %i
  br label %condition

after_exit57:                                     ; No predecessors!
  br label %after_if51
}

define i32 @main() {
entry:
  %0 = call i32 @isprime(i32 0)
  %1 = call i32 @writeln(i32 %0)
  %2 = call i32 @isprime(i32 1)
  %3 = call i32 @writeln(i32 %2)
  %4 = call i32 @isprime(i32 2)
  %5 = call i32 @writeln(i32 %4)
  %6 = call i32 @isprime(i32 3)
  %7 = call i32 @writeln(i32 %6)
  %8 = call i32 @isprime(i32 4)
  %9 = call i32 @writeln(i32 %8)
  %10 = call i32 @isprime(i32 5)
  %11 = call i32 @writeln(i32 %10)
  %12 = call i32 @isprime(i32 6)
  %13 = call i32 @writeln(i32 %12)
  %14 = call i32 @isprime(i32 7)
  %15 = call i32 @writeln(i32 %14)
  %16 = call i32 @isprime(i32 8)
  %17 = call i32 @writeln(i32 %16)
  %18 = call i32 @isprime(i32 9)
  %19 = call i32 @writeln(i32 %18)
  %20 = call i32 @isprime(i32 10)
  %21 = call i32 @writeln(i32 %20)
  %22 = call i32 @isprime(i32 11)
  %23 = call i32 @writeln(i32 %22)
  %24 = call i32 @isprime(i32 12)
  %25 = call i32 @writeln(i32 %24)
  %26 = call i32 @isprime(i32 13)
  %27 = call i32 @writeln(i32 %26)
  %28 = call i32 @isprime(i32 14)
  %29 = call i32 @writeln(i32 %28)
  %30 = call i32 @isprime(i32 15)
  %31 = call i32 @writeln(i32 %30)
  %32 = call i32 @isprime(i32 16)
  %33 = call i32 @writeln(i32 %32)
  %34 = call i32 @isprime(i32 17)
  %35 = call i32 @writeln(i32 %34)
  br label %functionReturn

functionReturn:                                   ; preds = %entry
  ret i32 0
}
