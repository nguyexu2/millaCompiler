; ModuleID = 'whileTest'
source_filename = "whileTest"

@a = global i32 0

declare i32 @writeln(i32)

declare i32 @readln(i32*)

define i32 @main() {
entry:
  store i32 0, i32* @a
  br label %condition

functionReturn:                                   ; preds = %after_loop
  ret i32 0

condition:                                        ; preds = %loop, %entry
  %a = load i32, i32* @a
  %equal = icmp ne i32 %a, 10
  %0 = zext i1 %equal to i32
  %1 = icmp eq i32 %0, 1
  br i1 %1, label %loop, label %after_loop

loop:                                             ; preds = %condition
  %a1 = load i32, i32* @a
  %2 = call i32 @writeln(i32 %a1)
  %a2 = load i32, i32* @a
  %"incremented/decremented" = add i32 %a2, 1
  store i32 %"incremented/decremented", i32* @a
  %a3 = load i32, i32* @a
  %"incremented/decremented4" = add i32 %a3, 1
  store i32 %"incremented/decremented4", i32* @a
  br label %condition

after_loop:                                       ; preds = %condition
  br label %functionReturn
}
